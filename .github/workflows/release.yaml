name: "Release"

on:
  release:
    types: [ created ]

jobs:
  binaries:
    name: "Binaries"
    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17

      - name: Build
        run: make dist

      - uses: skx/github-action-publish-binaries@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: "./dist/*"

  docker:
    name: "Docker"
    runs-on: "ubuntu-latest"

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Get tags
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Set Username/Repo and ImagePrefix as ENV vars
        run: |
          echo "USER_REPO"=$(echo "$GITHUB_REPOSITORY" | awk '{print tolower($1)}' | sed -e "s/:refs//") >> $GITHUB_ENV && \
          echo "IMAGE_PREFIX"=$(echo "ghcr.io/$GITHUB_REPOSITORY" | awk '{print tolower($1)}' | sed -e "s/:refs//") >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push container images
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            VERSION=latest
            GIT_COMMIT=${{ github.sha }}
            REPO_URL=https://github.com/${{ env.USER_REPO }}
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:${{ steps.get_tag.outputs.TAG }}